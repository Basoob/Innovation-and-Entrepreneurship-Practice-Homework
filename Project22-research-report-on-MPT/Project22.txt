Merkle Patricia Trie（MPT）的节点类型包括叶子节点（Leaf Node）、扩展节点（Extension Node）、分支节点（Branch Node）和空值节点（Empty Node）。
叶子节点（Leaf Node）：
数据结构：包含关键-值对的节点，用于存储真实的键值数据。
代码示例：
class LeafNode:
    def __init__(self, key, value):
        self.key = key
        self.value = value
扩展节点（Extension Node）：
数据结构：扩展节点包含一个共同的前缀，只拥有一个子节点。
代码示例：
class ExtensionNode:
    def __init__(self, partial_key, child_node):
        self.partial_key = partial_key
        self.child_node = child_node
分支节点（Branch Node）：
数据结构：分支节点包含一个固定长度的子节点数组，可以拥有多个子节点，每个子节点可以为空或指向其他节点。
代码示例：
class BranchNode:
    def __init__(self):
        self.children = [None] * 16  # 固定长度的子节点数组

空值节点（Empty Node）：
数据结构：表示一个缺失的子节点。
代码示例：
class EmptyNode:
    def __init__(self):
        pass
Merkle Patricia Trie（MPT)提供了三种不同的编码方式来满足不同场景的不同需求，三种编码方式为；

Raw编码（原生字符）
Hex编码（扩展16进制编码）
Hex-Prefix编码（16进制前缀编码）
三者分别解决的是MPT对外提供接口的编码，在内存中的编码，和持久化到数据库中的编码。

Merkle Patricia Trie（MPT)相关操作
检索（Get）：
从根节点开始，根据键的每一位选择相应的子节点，直到找到对应的叶子节点，并从叶子节点中获取存储的值并返回，具体操作如下。
首先将需要查找的key转换为十六进制拓展编码，得到的内容就是搜索路径。从根节点开始搜索与搜索路径内容一致的路径：然后分几种情况
1）若当前节点为叶子节点，存储的内容是数据项的内容，且搜索路径的内容与叶子节点的key一致，则表示找到该节点；反之则表示该节点在树中不存在。
2）若当前节点为扩展节点，存储的内容是另外一个节点的引用，且当前节点的key是搜索路径的前缀，那么就将将搜索路径减去当前节点的key，将剩余的搜索路径作为参数，对其子节点递归地调用查找函数；若当前节点的key不是搜索路径的前缀，表示该节点在树中不存在。
3）若当前节点为分支节点，若搜索路径为空，则返回分支节点的存储内容；反之利用搜索路径的第一个字节选择分支节点的孩子节点，将剩余的搜索路径作为参数递归地调用查找函数。

插入(Insert):
插入操作是基于查找操作完成的，具体流程如下：
首先找到与新插入节点拥有最长相同路径前缀的节点，对该节点的类型分几种情况：
1、若该节点是分支节点：
1）剩余的搜索路径不为空，将新节点作为一个叶子节点插入到对应的孩子列表中；
2）如果剩余的搜索路径为空（完全匹配），则将新节点的内容存储在分支节点的Value中；
2、若该节点为叶子/扩展节点：
1）剩余的搜索路径与当前节点的key一致，则把当前节点的Value更新即可；
2）剩余的搜索路径与当前节点的key不完全一致，则将叶子／扩展节点的孩子节点替换成分支节点，将新节点与当前节点key的共同前缀作为当前节点的key，将新节点与当前节点的孩子节点作为两个孩子插入到分支节点的孩子列表中，同时当前节点转换成了一个扩展节点

删除(Delete):
Get操作找到与需要插入的节点拥有最长相同路径前缀的节点，记为Node；
若Node为叶子／扩展节点：
 - 若剩余的搜索路径与node的Key完全一致，则将整个node删除；
- 若剩余的搜索路径与node的key不匹配，则表示需要删除的节点不存于树中，删除失败；
- 若node的key是剩余搜索路径的前缀，则对该节点的Val做递归的删除调用；
若Node为分支节点：
- 删除孩子列表中相应下标标志的节点；
- 删除结束，若Node的孩子个数只剩下一个，那么将分支节点替换成一个叶子／扩展节点；
 - 若删除成功，则将被修改节点的dirty标志置为true，hash标志置空（之前的结果已经不可能用），且将节点的诞生标记更新为现在；
Merkle Patricia Trie（MPT）的主要特点与优势
快速回滚：
快速回滚指的是在面临需要回滚到先前状态时的高效性能。
由于MPT是一个可持久化的数据结构，每次对MPT进行操作时都会生成一个新的根节点，而旧的根节点和其他节点则会被保留。这种设计使得回滚操作变得很简单，并且具有很好的性能。
当需要回滚时，只需要将当前根节点替换为之前保存的旧根节点，整个MPT就会回到先前的状态。这个过程非常高效，因为只需要替换一个引用即可，而不需要对整个数据结构重新构建。
此外，由于MPT使用哈希值来验证数据的完整性和一致性，因此可以在回滚操作之后对整个MPT进行完整性检查，以确保回滚的操作是正确的。这种保证数据一致性的机制使得回滚操作变得更加可靠。
冗余消除：
MPT使用哈希值来标识和比较节点，具有相同值的节点只需要存储一次。这种冗余消除的机制能够大大减少存储空间的占用。
高效查找和验证：
通过使用键的前缀来组织节点，MPT可以快速定位到所需的键值对。对于具有共同前缀的键，它们共享相同的节点，这使得查找操作具有高效性能。此外，通过哈希值的验证，可以确保树中的数据完整性和一致性。

